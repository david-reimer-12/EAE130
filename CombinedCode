import numpy as np
import math 
from scipy.optimize import fsolve
import matplotlib.pyplot as plt
import os
import pandas as pd

#Aircraft Data
# Wing Parameter
S_ref = 191 #446     #[ft^2]
S = S_ref
AR = 8
LD_ratio = 11.8
taper_ratio = 1
b = (AR*S)**0.5
c_root = 2*S/(b*(1+taper_ratio))

#Lift and Drag Data
C_L_max = 1.4
C_L_max_TO = 1.4
C_L_max_L = 1.5

# Weights
W_TO = 8413
W_takeoff = W_TO
W_L =  W_TO
W_cruise = W_TO
W = W_TO
W_crew = 180 #lbm
W_payload = 2000 #lbm
W_engine = 500 #lbm


# Engine and Hybrid Eff + Ratios
N_engine = 1
phi = 0.3 #Hybrid Ratio
n_p1 = 0.80
n_p2 = 0
n_3 = 0.8

n_p = 0.8

# Specific Energy for Fuel and Battery
e_f =  11940 * 3.41214/2.20462 #W-h/kg ->BTU/lbm
e_bat = 0.8 * 500 * 3.41214/2.20462 #W-h/kg -> BTU/lbm

# Mission + Flight Parameters
Range = 3.706*10**(6) #ft
V_stall = 168.71   #ft/s
V = 290.3     #ft/s
V_crz = V
V_Cruise = V
n =  1/np.cos(45*(np.pi/180))      #Load Factor

# Performance Parameters
G_TO = 0.083
G_ER = 0.04
G_BALK = 0.03
k_s_TO_climb = 1.2
k_s_ER_climb = 1.3
k_s_BALK = 1.3
S_a = 600   #[ft]

# Constants
g = 32.17 # ft/s^2
rho = 23.77E-4 #slug/ft3
rho_SL = 1.019E-3 #slug/ft3
q = (0.5) * rho * V ** 2
P_ratio = 1.33

# Constant Variables
CPI = 1.39  # Consumer Price Index (https://www.bls.gov/data/inflation_calculator.htm)
Q = 275  # Number of aircraft produced over 5 years
y = 2025  # Year of production

W_over_P = 5
W_over_S = 44

# Solving for TOP23
a = 0.0149
b = 8.134
c = -1500
coefficients = [a,b,c]
roots = np.roots(coefficients)
TOP_23 = max(roots)








## Regression Data Ag Aircraft
def AgRegressionData():
    global A, B
    W0 = [3417,2866,6614,9259,4244,10000,7020,3500,3300,3900,6173,6100,10000,6000,6000,6000,12675]
    We = [2229,1880,3550,5445,2242,4990,3525,2306,2229,2050,3660,2995,4500,3900,3550,3600,7120]
    log_W0 = np.log10(W0)
    log_We = np.log10(We)
    B, A = np.polyfit(log_We, log_W0,1)

## Regression Data Twin Engine Aircraft
def TwinRegressionData():
    global A, B
    W0 = [3900, 5100, 6775, 9630, 5150, 5990,6850,6750,7450,8200,6500,7000,5500,3800,3800,8700,3050,2183,9480,10325,7350,2900]
    We = [2466,3236,4423,5765,3305,3948,4077,4368,4668,4915,4003,4221,3737,2354,2430,4910,2100,1322,5732,6629,4100,1610]
    log_W0 = np.log10(W0)
    log_We = np.log10(We)
    B, A = np.polyfit(log_We, log_W0,1)

def WePrime():
    global A, B
    W0 = [3417,2866,6614,9259,4244,10000,7020,3500,3300,3900,6173,6100,10000,6000,6000,6000,12675]
    We = [2229,1880,3550,5445,2242,4990,3525,2306,2229,2050,3660,2995,4500,3900,3550,3600,7120]
    log_W0 = np.log10(W0)
    log_We = np.log10(We)
    B, A = np.polyfit(log_We, log_W0,1)

def ComparableAircraftWe():
    global C_comparable, A_comparable
    #Comparable Aircraft W_e'
    #AT-502
    W_e_AT = 4650
    S_AT = 312
    W_pwr_AT = 331
    W_e_prime_AT = W_e_AT - 2.5*S_AT - W_pwr_AT
    W0_AT = 10480
    P_AT = 750
    #Ag Cat
    W_e_Ag = 3335
    S_Ag = 328
    W_pwr_Ag = 505
    W_e_prime_Ag = W_e_Ag - 2.5*S_Ag - W_pwr_Ag
    W0_Ag = 4500
    P_AgCat = 450
    #Thrush 
    W_e_Th = 4800
    S_Th = 365
    W_pwr_Th = 390
    W_e_prime_Th = W_e_Th - 2.5*S_Th - W_pwr_Th
    W0_Th = 10500
    P_Thrush = 800
    #AT-802
    W_e_AT802 = 6751
    S_AT802 = 401
    W_pwr_AT802 = 486
    W_e_prime_AT802 = W_e_AT802 - 2.5*S_AT802 - W_pwr_AT802
    W0_AT802 = 16000
    P_AT802 = 1350

    W0 = np.array([W0_AT, W0_Ag, W0_Th, W0_AT802])
    W_e_prime = np.array([W_e_prime_AT, W_e_prime_Ag, W_e_prime_Th, W_e_prime_AT802])
    x = np.log(W0)
    y = np.log(W_e_prime/W0)

    C_comparable, D = np.polyfit(x,y,1)
    A_comparable = np.exp(D)

    global P_comparable, S_comparable
    P_comparable = [P_AT, P_AgCat, P_Thrush, P_AT802]
    S_comparable = [S_AT, S_Ag, S_Th, S_AT802]

def ZeroLiftDrag():
    global C_d_0
    c = 1.0447      #Ag aircraft constant (Roskam)
    d = 0.5326      #Ag aircraft constant (Roskam)
    S_wet = (10**c) * (W_TO**d)     #Wetted surface area [ft^2]

    C_f = 0.0055    #Estimated skin friction coefficient (Raymer)
    a = -2.2218     #Constant based on C_f (Roskam)
    b = 1.00        #Constant based on C_f (Roskam)

    f = 10**(a + b*(np.log10(S_wet)))       #logarithmic equation for equivalent parasite area (Roskam)

    #Here we will add in additional zero lift drag paramater like canapy and control surface gaps:
    C_d_0_CS = 0.0005       #Additional drag coefficient value for control surface gaps
    C_d_0_C = 0.0004        #Additional drag coefficient value for Canopy design
    C_d_0_A = 0.0008        #Additional drag coefficient value for GPS antenna
    C_d_0 = (f / S_ref) + C_d_0_CS + C_d_0_C + C_d_0_A
    print("Zero-Lift Drag Coefficient (C_d_0):", C_d_0)
    
def Configuration_Values(configuration):
    drag_LG = 0.015
    drag_Flaps_TO = 0.01
    drag_Flaps_L = 0.060
    e_clean = 0.825
    e_LG = e_clean
    e_Flaps_TO = 0.775
    e_Flaps_L = 0.725

    if configuration == 1:
        del_C_d_0 = drag_LG
        e = e_LG
    elif configuration == 2:
        del_C_d_0 = drag_LG + drag_Flaps_TO
        e = e_Flaps_TO
    elif configuration == 3:
        del_C_d_0 = drag_LG + drag_Flaps_L
        e = e_Flaps_L
    else:
        return "Configuration input is not possible"
    return del_C_d_0, e

def PlotDragPolar():
    global e_1, e_2, e_3, k
    #Create an array of values for C_L:
    C_L = np.linspace(-2,2,100)

    del_C_d_0_1, e_1 = Configuration_Values(1)
    del_C_d_0_2, e_2 = Configuration_Values(2)
    del_C_d_0_3, e_3 = Configuration_Values(3)

    C_D_1 = (C_d_0 + del_C_d_0_1) + ((C_L**2) / (np.pi * e_1 * AR))
    C_D_2 = (C_d_0 + del_C_d_0_2) + ((C_L**2) / (np.pi * e_2 * AR))
    C_D_3 = (C_d_0 + del_C_d_0_3) + ((C_L**2) / (np.pi * e_3 * AR))
    k= 1/(np.pi*e_1*AR)
    plt.figure(figsize=(10,6))
    plt.title('Drag Polars for 3 Aircraft Configurations')
    plt.xlabel("$C_D$")      
    plt.ylabel("$C_L$")
    line = 3      #creates a larger linewidth
    plt.plot(C_D_1, C_L, color='blue', linewidth=line, label='Configuration #1: Static LG')
    plt.plot(C_D_2, C_L, color='red', linewidth=line, label='Configuration #2: Static LG, Takeoff Flaps')
    plt.plot(C_D_3, C_L, color='green', linewidth=line, label='Configuration #3: Static LG, Landing Flaps')
    plt.legend(loc='best', fontsize='10', framealpha=1)
    plt.show()

def WeightEstimationUpdated():
    global W0, S, W_e
    W_guess = 10000 #lb
    C_D_0 = C_d_0
    S = S_ref
    tol = 10**(-6)
    error = 2*tol
    W0 = W_guess

    P_values = []
    S_values = []

    def equation(E0_tot):
        term1 = (n_3 * e_f / g) * LD_ratio * (n_p1 + (n_p2 * phi / (1 - phi)))
        numerator = W_e + W_payload + (g / e_bat) * E0_tot * (phi + (e_bat / e_f) * (1 - phi)) 
        denominator = W_e + W_payload + (g / e_bat) * phi * E0_tot 
        eq = term1 * np.log(numerator / denominator) - Range
        
        return eq
    
    while tol < error:
        global W_e
        W_Wing = 2.5*S #2.5

        We_prime_frac = A_comparable*W0**C_comparable 
        We_prime = We_prime_frac*W0
        W_e = We_prime + W_Wing + W_engine

        #Range = n_3 * e_f/g * (LD_ratio) * (n_p1+n_p2*phi/(1-phi))*np.log((W_e+W_payload+g/e_bat*E0_tot*(phi+e_bat/e_f*(1-phi)))/(W_e+W_payload+g/e_bat*phi*E0_tot))

        # Initial guess for E0_tot
        E0_tot_guess = 5
        # Solve for E0_tot
        E0_tot = fsolve(equation, E0_tot_guess)  

        W_f = g/e_f *(1-phi)*E0_tot
        W_battery = g/e_bat * phi*E0_tot
        W0_new = W_crew +W_payload + W_f + W_battery + W_e

        P = W0_new / W_over_P
        S = W0_new / W_over_S

        error = abs((W0_new - W0)/W0_new)
        print('-----------------')
        #print('equation',test)
        print('We_prime', We_prime)
        print('W_e',W_e)
        print('E0_tot', E0_tot)
        print('W0', W0_new)
        print('error', error)

        W0 = W0_new
        P_values.append(P)
        S_values.append(S)

        if tol > error:
            print('--------------------------')
            print('------Final Values--------')
            print("E0")
            print(E0_tot)
            print("TOGW")
            print(W0)
            print("Empty Weight:")
            print(W_e)
            print("Power")
            print(P)
            print('Wing Area')
            print(S)
            print('battery weight')
            print(W_battery)
            print('fuel weight')
            print(W_f)
            print('--------------------------')
            print('--------------------------')

    #     #Plot P vs. S
    plt.figure(figsize=(8, 6))
    plt.plot(S_values, P_values, marker='o', linestyle='-', color='b')
    plt.xlabel('Wing Area (S) [ftÂ²]')
    plt.ylabel('Power (P) [hp]')
    plt.title('Power vs. Wing Area')
    plt.grid()
    plt.show()
    
    # Plot P vs. S Comparable
    coeffs = np.polyfit(S_comparable, P_comparable, 1)
    S_range = np.linspace(100, 600, 100)
    P_trend = coeffs[0] * S_range + coeffs[1]

    W0_final = W_TO
    #Takeoff Constraint:
    P_over_W_TO = ((W0_final/S_range) / (TOP_23 * (rho/rho_SL) * C_L_max))
    P_TO = (P_over_W_TO)*W0_final

    # Landing Constraint (redefined as a function of S_range)
    W_over_S_Landing = (80 * ((W0_final/S_range) / ((rho/rho_SL)*C_L_max_L))) + S_a
    P_Landing = (W_over_S_Landing) * W0_final  # Convert to power
    P_range = np.linspace(0,2500,100)

    #Stall Constraint:
    W_stall = (1/2) * rho * (V_stall**2) * C_L_max * S_range
    S_Stall = (W_stall)**-1*S_range * W0_final

    #Climb Constraint(no climb corrections included due to immediate landing):
    V_climb = k_s_TO_climb * V_stall
    C_L_max_CL = (2*W0_final) / (rho *(V_climb /k_s_TO_climb)**2)
    C_L_climb = C_L_max_CL / (k_s_TO_climb**2)
    V_climb = np.sqrt((2/(rho*C_L_max_CL)) * (W0_final/S_range))

    #TO Climb:
    T_over_W_TOclimb = (((k_s_TO_climb)**2 * C_D_0)/C_L_max_CL) + ((1/(np.pi*e_2*AR)) * ((C_L_max_CL/(k_s_TO_climb**2)))) + G_TO
    P_over_W_TOclimb = T_over_W_TOclimb / ((550*n_p)/V_climb)
    P_TOclimb = P_over_W_TOclimb*W0_final

    #En Route Climb:
    T_over_W_ERclimb = (((k_s_ER_climb)**2 * C_D_0)/C_L_max_CL) + ((1/(np.pi*e_1*AR)) * ((C_L_max_CL/(k_s_ER_climb**2)))) + G_ER
    P_over_W_ERclimb = T_over_W_ERclimb / ((550*n_p)/V_climb)
    P_ERclimb = (P_over_W_ERclimb)*W0_final

    #Balked Climb:
    T_over_W_BALKclimb = (((k_s_BALK)**2 * C_D_0)/C_L_max_CL) + ((1/(np.pi*e_1*AR)) * ((C_L_max_CL/(k_s_ER_climb**2)))) + G_BALK
    P_over_W_BALKclimb = T_over_W_BALKclimb / ((550*n_p)/V_climb)
    P_BALKclimb = (P_over_W_BALKclimb)*W0_final

    #Cruise Constraint:
    q_crz = 0.5 * rho * (V_crz**2)
    T_over_W_crz = (((q_crz*C_D_0) / (W0_final/S_range)) + (k/q_crz)*(W0_final/S_range))
    P_over_W_crz = T_over_W_crz / ((550*n_p)/V_crz)
    P_crz = P_over_W_crz*W0_final

    #Absolute Ceiling Constraint:
    T_over_W_Cieling_abs = 2*np.sqrt(k*C_D_0)
    P_over_W_Cieling_abs = T_over_W_Cieling_abs / ((550*n_p)/np.sqrt((2/(rho*C_L_max))*(W0_final/S_range)))
    P_cieling_abs = P_over_W_Cieling_abs * W0_final

#Maneuver Constraint: **STILL NEED TO COMPUTE THE LOAD FACTOR AND MANEUVER STALL SPEED**
    T_over_W_maneuver = ((q_crz*C_D_0)/(W0_final/S_range)) + (k*(n**2 / q)*(W0_final/S_range))
    P_over_w_maneuver = T_over_W_maneuver / ((550*n_p)/np.sqrt((2/(rho*C_L_max))*(W0_final/S_range)))
    P_maneuver = P_over_w_maneuver*W0_final

    # Plot P vs. S
    line = 2
    plt.figure(figsize=(8, 6))
    plt.scatter(446, 1366, marker='o', color='b', s=80, label='Design Point')
    plt.plot(S_range, P_TO, color='cyan', linewidth=line, label='Takeoff')
    plt.plot(S_range, P_Landing, color='green', linewidth=line, label='Landing')
    plt.plot(S_Stall, P_range, color='red', linewidth=line, label='Stall')
    plt.plot(S_range, P_ERclimb, color='pink', linewidth=line, label='ER Climb')
    plt.plot(S_range, P_TOclimb, color='black', linewidth=line, label='TO Climb')
    plt.plot(S_range, P_BALKclimb, color='brown', linewidth=line, label='Balk Climb')
    plt.plot(S_range, P_crz, color='orange', linewidth=line, label='Cruise')
    plt.plot(S_range, P_cieling_abs, color='olive', linewidth=line, label='Ceiling')
    plt.plot(S_range, P_maneuver, color='lime', linewidth=line, label='Maneuver')
    plt.scatter(S_comparable, P_comparable, marker='s', color='r', label='Comparable Aircraft')
    aircraft_labels = ["AT-502", "Ag Cat", "Thrush", "AT-802"]
    for i, label in enumerate(aircraft_labels):
        plt.annotate(label, (S_comparable[i], P_comparable[i]), textcoords="offset points", xytext=(5,5), ha='right', fontsize=10, color='black')

    # Shade the area above balked climb, to the right of landing, and to the left of cruise
    plt.fill_between(
        S_range,  # X-values (wing area)
        P_TOclimb,  
        2500,  # Upper boundary (top of the plot)
        where=(S_range > 175 ) & (S_range < 446),  # Condition: x > 379
        color='cyan', alpha=0.3, label='Feasability Region'
    )
    plt.fill_between(
        S_range,  # X-values (wing area)
        P_crz,  
        2500,  # Upper boundary (top of the plot)
        where=(S_range > 443),
        color='cyan', alpha=0.3, 
    )
    plt.xlabel('Wing Area (S) [ftÂ²]')
    plt.ylabel('Power (P) [hp]')
    plt.title('Power vs. Wing Area')
    plt.xlim(100, 600)
    plt.ylim(0, 2500)
    plt.legend(
        fontsize='small',  # Smaller font size
        loc='lower right',  # Move legend to bottom right
        bbox_to_anchor=(1.0, 0.0)  # Fine-tune position (optional)
    )
    plt.grid()
    plt.show()

def WingEstimation():
    V_stall = 90
    S = 446
    b = (AR*S)**0.5
    taper_ratio = 1
    c_root = 2*S/(b*(1+taper_ratio))
    W0 = 9050
    MAC = 2/3 * (1+taper_ratio+taper_ratio**2)/(1+taper_ratio) * c_root
    Spanwise_Location = b/6*(1+2*taper_ratio)/(1+taper_ratio)
    C_L_Cruise = 2*W0/(rho*S*V_Cruise**2)
    C_L_Stall =  2*W0/(rho*S*V_stall**2)
    print('MAC')
    print(MAC)
    print('Spanwise Location')
    print(Spanwise_Location)
    print('Span')
    print(b)
    print('Chord Length')
    print(c_root)
    print("CL Cruise")
    print(C_L_Cruise)
    print("CL Stall")
    print(C_L_Stall)

def WeightEstimation():
    W_crew = 180 #lbs
    W_payload = 2000 #lbs
    Range = 3.706*10**(6) #ft
    Endurance = 28800 #seconds
    V_inf = 290.303 #ft/s
    SFC = 7.06*10**(-9) #1/ft
    prop_eff = 0.8
    LD_ratio = 11.8
    W_guess = 5000
    cruise = math.exp(-(Range*SFC)/(prop_eff*LD_ratio))
    loiter = math.exp((-Endurance*V_inf*SFC)/(prop_eff*LD_ratio))
    fuel_weight_ratio = 1 - 0.996*0.995*0.996*0.998*0.999*0.998*cruise*loiter
    tol = 10**(-6)
    error = 2*tol
    W0 = W_guess

    while tol < error:
        empty_weight_frac = 10**(-A/B) * W0 **(1/B-1)
        W0_new = (W_crew + W_payload)/(1-1.06*fuel_weight_ratio-empty_weight_frac) + 400
        error = abs((W0_new - W0)/W0_new)
        W0 = W0_new

        if tol > error:
            We = empty_weight_frac*W0
            print("TOGW")
            print(W0)
            print("Empty Weight:")
            print(We)

######################


ComparableAircraftWe()
ZeroLiftDrag()
PlotDragPolar()
WeightEstimationUpdated()
WingEstimation()


#####################

def Empty_Weight(concept_number):
    if concept_number == 1:
        empty_weight = 4088
    else:
        empty_weight = W_e
    return empty_weight

concept_number = 2 # 2 or 3
empty_weight = Empty_Weight(concept_number)
W_Airframe = empty_weight * 0.4  # Airframe weight is 40% of empty weight

print(f"Empty Weight: {empty_weight} lbs")
print(f"Airframe Weight: {W_Airframe} lbs")

V_H = 250 # Maximum level airspeed [knots/hr]
Q_M = 4.5 # Number of aircraft produced in one month
Q_Proto = 1 # Number of prototype aircraft to be produced

class ConceptOptions:
    taper = "No" # no means the wing is tapered, yes means wing is untapered
    composites = "No"
    flaps = "Yes"

concept_options = ConceptOptions()

# Note All Cost Factors From Finger et al. 2019

# Cost of Development

def Engineering_Cost(concept_number):
    F_Comp = 2 if concept_options.composites == "Yes" else 1
    F_CF = 1.03 if concept_options.flaps == "Yes" else 1
    F_Press = 1.03
    F_HyE = 1.33
    R_ENG = 2.576 * y - 5058  # Hourly rate of engineers (Nicholai & Carichner) 
    Cost_of_Engineering = (0.083 * W_Airframe**0.791 * V_H**1.521 * Q**0.183 * F_CF * F_Comp * 
                           F_Press * F_HyE * R_ENG * CPI) #Finger et al. 2019
    print(f'The Cost of Engineering for Concept {concept_number} is {Cost_of_Engineering}')
    return Cost_of_Engineering

def Tooling_Cost(concept_number):
    F_Comp = 2 if concept_options.composites == "Yes" else 1
    F_CF = 1.02 if concept_options.flaps == "Yes" else 1
    F_Taper = 0.95 if concept_options.taper == "Yes" else 1
    F_Press = 1.01
    F_HyE = 1.10
    R_Tool = 2.883 * y - 5666 # (Nicholai & Carichner) 
    Cost_of_Tooling = (2.1036 * W_Airframe**0.764 * V_H**0.899 * Q**0.178 * Q_M**0.066 * F_Taper * 
                       F_CF * F_Comp * F_Press * F_HyE * R_Tool * CPI) #Finger et al. 2019
    print(f'The Cost of Tooling for Concept {concept_number} is {Cost_of_Tooling}')
    return Cost_of_Tooling

def Development_Support_Cost(concept_number):
    F_Comp = 1.5 if concept_options.composites == "Yes" else 1
    F_CF = 1.01 if concept_options.flaps == "Yes" else 1
    F_Press = 1.03
    F_HyE = 1.05
    Cost_of_Development_Support = (0.06458 * W_Airframe**0.873 * V_H**1.89 * Q_Proto**0.346
                                    * F_CF * F_Comp * F_Press * F_HyE * CPI) #Finger et al. 2019
    print(f'The Cost of Development Support for Concept {concept_number} is {Cost_of_Development_Support}')
    return Cost_of_Development_Support

def Flight_Test_Ops_Cost(concept_number):
    F_HyE = 1.50
    Cost_of_Flight_Test_Ops = (0.009646 * W_Airframe**1.16 * V_H**1.3718 * Q_Proto**1.281 * 
                             F_HyE * CPI) #Finger et al. 2019
    print(f'The Cost of Flight Test Operations for Concept {concept_number} is {Cost_of_Flight_Test_Ops}')
    return Cost_of_Flight_Test_Ops

def Cost_of_Development(concept_number):
    Engineering = Engineering_Cost(concept_number)
    Tooling = Tooling_Cost(concept_number)
    Development_Support = Development_Support_Cost(concept_number)
    Flight_Test_Ops = Flight_Test_Ops_Cost(concept_number)
    Cost_of_Dev = (Engineering + Tooling + Development_Support + 
                            Flight_Test_Ops) #Finger et al. 2019
    print(f'The Cost of Development for Concept {concept_number} is {Cost_of_Dev}')
    return Cost_of_Dev

# Flyaway Cost 

def Cost_of_Materials(concept_number):
    F_CF = 1.02 if concept_options.flaps == "Yes" else 1
    F_Press = 1.01
    F_HyE = 1.05
    Cost_of_Materials = (24.896 * W_Airframe**0.689 * V_H**0.624 * Q**0.792 * CPI * 
                         F_CF * F_Press * F_HyE) / Q #Finger et al. 2019
    print(f'The Cost of Materials for Concept {concept_number} is {Cost_of_Materials}')
    return Cost_of_Materials

def Manufacturing_Cost(concept_number):
    F_HyE = 1.10
    F_Comp = 1.25 if concept_options.composites == "Yes" else 1
    F_CF = 1.01 if concept_options.flaps == "Yes" else 1
    R_MFG = 2.316 * y - 4552 # (Nicholai & Carichner) 
    Cost_of_Manufacturing = (20.2588 * W_Airframe**0.74 * V_H**0.543 * Q**0.524 * F_CF * 
                             F_Comp * F_HyE * R_MFG * CPI) / Q #Finger et al. 2019
    print(f'The Cost of Manufacturing for Concept {concept_number} is {Cost_of_Manufacturing}')
    return Cost_of_Manufacturing

def Quality_Control_Cost(concept_number):
    F_Comp = 1.5 if concept_options.composites == "Yes" else 1
    F_HyE = 1.5
    C_MFG = Manufacturing_Cost(concept_number)
    Cost_of_Quality_Control = 0.13 * C_MFG * F_Comp * F_HyE #Finger et al. 2019
    print(f'The Cost of Quality Control for Concept {concept_number} is {Cost_of_Quality_Control}')
    return Cost_of_Quality_Control

#Fixed Costs
Cost_Fixed_landing = -7500 #Subract $7,500 for fixed landing gear (Finger et al. 2019)
Cost_Pt_23 = 15000 #Part 23 aircraft
Cost_Miscelaneous =  Cost_Fixed_landing + Cost_Pt_23

# Flyaway Factors
F_EXP = 0.95
F_QDF = F_EXP ** (1.4427 * np.log(Q)) #Quantity Discount Factor (Finger et al. 2019)
F_Insurance = 1.15 # Cost of Insurance is 15-20% of the total cost to produce for hyrbrid (Finger et al. 2019)
F_profit = 1.10 # 10% Profit (Finger et al. 2019)

#Engine Costs
def Electric_Motor_Cost(concept_number):
    if concept_number == 1:  #Number of motors
        N_motor = 2
    else:
        N_motor = 1
    P_EM = 76 #[hp]
    Cost_of_Electric_Motor = 174 * N_motor * P_EM * CPI   #Finger et al. 2019
    print(f'The Cost of the Electric Motor for Concept {concept_number} is ${Cost_of_Electric_Motor}')
    return Cost_of_Electric_Motor

def Power_Management_Cost(concept_number):
    P_EM = 76 #[hp]
    Cost_of_Power_Management_System = 150 * P_EM * CPI  #Finger at al. 2019
    print(f'The Cost of the Power Management System for Concept {concept_number} is ${Cost_of_Power_Management_System}')
    return Cost_of_Power_Management_System

def Battery_Cost(concept_number):
    E_bat = 18 #[kWh]
    Cost_of_Battery = 150 * E_bat * CPI  #Finger at al. 2019
    print(f'The Cost of the Battery for Concept {concept_number} is ${Cost_of_Battery}')
    return Cost_of_Battery

def Propeller_Cost(concept_number):
    if concept_number == 1:  #Number of propellers
        N_prop = 2
    else:
        N_prop = 1
    if concept_number == 1:  #prop diamter [ft]
        D_P = 6
    if concept_number ==1:
        D_P = 7
    else:
        D_P = 8
    P_SHP = 221
    Cost_of_Propeller = 210 * N_prop * CPI * (D_P)**2 * (P_SHP / D_P)**0.12   #Finger at al. 2019
    print(f'The Cost of the Propeller(s) for concept {concept_number} is ${Cost_of_Propeller}')
    return Cost_of_Propeller

def Cost_of_Engine(concept_number):
    Electric = Electric_Motor_Cost(concept_number)
    Power = Power_Management_Cost(concept_number)
    Battery = Battery_Cost(concept_number)
    Propeller = Propeller_Cost(concept_number)
    Cost_of_Engine = Electric + Power + Battery + Propeller 
    print(f'The Cost of the Engine for concept {concept_number} is ${Cost_of_Engine}')
    return Cost_of_Engine

def Cost_of_Flyaway(concept_number):
    Materials = Cost_of_Materials(concept_number)
    Manufacturing = Manufacturing_Cost(concept_number)
    Engine = Cost_of_Engine(concept_number)
    Quality_Control = Quality_Control_Cost(concept_number)
    Misc = Cost_Miscelaneous
    Flyaway_Cost = ((Materials + Engine + Misc + Manufacturing + Quality_Control) * F_QDF * F_Insurance * F_profit)
    print(f'The Flyaway Cost for Concept {concept_number} is {Flyaway_Cost}') 
    return Flyaway_Cost

# Direct Operating Cost
def Fuel_Cost(concept_number):
    W_fuel = 192 #[kg]
    P_fuel = 6.93 #[$/gal]
    rho_fuel = 2.72928 #[kg/gal]
    Cost_of_Fuel = 1.02 * W_fuel * (P_fuel / rho_fuel)   #Metabook
    print(f'The Cost of Fuel for Concept {concept_number} is ${Cost_of_Fuel}')
    return Cost_of_Fuel

def Oil_Cost(concept_number):
    W_oil = 192 #[kg]
    P_oil = 6.93 #[$/gal]
    rho_oil = 3.3728 #[kg/gal]
    Cost_of_Oil = 1.02 * W_oil * (P_oil / rho_oil)   #Metabook
    print(f'The Cost of Oil for Concept {concept_number} is ${Cost_of_Oil}')
    return Cost_of_Oil

def Electricity_Cost(concept_number):
    W_battery = 93 #[kg]
    P_electricity = 0.1654 #[$/kWh]
    Battery_Specific_Energy = 1.9 #[kWh/kg] 
    Cost_of_Electricity = 1.05 * W_battery * P_electricity * Battery_Specific_Energy
    print(f'The Cost of Electricity {concept_number} is ${Cost_of_Electricity}')
    return Cost_of_Electricity

def Annual_Utilization(concept_number):
    t_b = 2.0 # Updated typical operational block time in hours for a turboprop # Some operational time factor
    U_annual = 1.5 * 10**3 * (3.4546 * t_b + 2.994 - (12.289 * t_b**2 - 5.6626 * t_b + 8.964) ** 0.5)
    print(f'Annual Utilization is {U_annual}')
    return U_annual

def Depreciation_Cost(concept_number):
    C_unit = 2205000 # Unit cost of aircraft
    K_depreciation = concept_number # Depreciation factor
    t_b = concept_number # Operational time factor
    n = concept_number # Number of years or cycles
    U_annual = Annual_Utilization(concept_number)
    C_depreciation = (C_unit * (1 - K_depreciation * t_b)) / (n * U_annual)
    print(f'The Cost of Depreciation for Concept {concept_number} is {C_depreciation}')
    return C_depreciation

def Registration_Cost(concept_number):
    MTOW = 16000 # Maximum takeoff weight for a commonly used turboprop # Maximum takeoff weight
    DOC = 1256 # Direct operating cost
    C_registration = (0.001 + 10**-8 * MTOW) * DOC
    print(f'The Cost of Registration for Concept {concept_number} is {C_registration}')
    return C_registration


def Financing_Cost(concept_number):
    DOC = 1256 # Direct operating cost
    C_finance = 0.07 * DOC
    print(f'The Cost of Financing for Concept {concept_number} is {C_finance}')
    return C_finance


def Navigation_Fees(concept_number):
    CEF = 1.03 # Cost escalation factor (~3% per year, typically used in aviation-related financial models)
    R = concept_number # Mission range
    t_b = concept_number # Operational time factor
    MTOW = 16000 # Maximum takeoff weight for a commonly used turboprop # Maximum takeoff weight
    C_navigation = 0.5 * CEF * (1.852 * R / t_b) * ((0.00045359237 * MTOW) / 50) ** 0.5
    print(f'The Cost of Navigation Fees for Concept {concept_number} is {C_navigation}')
    return C_navigation


def Airport_Fees(concept_number):
    MTOW = 16000 # Maximum takeoff weight for a commonly used turboprop # Maximum takeoff weight
    CEF = 1.03 # Cost escalation factor (~3% per year, typically used in aviation-related financial models)
    C_airport = 1.5 * (MTOW / 1000) * CEF
    print(f'The Cost of Airport Fees for Concept {concept_number} is {C_airport}')
    return C_airport

def Direct_Op_Cost(concept_number):
    Fuel = Fuel_Cost(concept_number)
    Oil = Oil_Cost(concept_number)
    Electric = Electricity_Cost(concept_number)
    Deprecitation = Depreciation_Cost(concept_number)
    Registration = Registration_Cost(concept_number)
    Financing = Financing_Cost(concept_number)
    Nav = Navigation_Fees(concept_number)
    Airport = Airport_Fees(concept_number)
    DOP_Cost = (Fuel  + Oil + Electric + Deprecitation + Registration + Financing + Nav + Airport)
    print(f'The Direct Operating Cost of {concept_number} is {DOP_Cost}')
    return DOP_Cost

Cost_of_Development(concept_number)
Cost_of_Flyaway(concept_number)
Direct_Op_Cost(concept_number)

#PlotDragPolar()
#AgRegressionData()
#WeightEstimation()

import numpy as np
import os
import matplotlib.pyplot as plt
import pandas as pd

#Data from the OpenVSP file:
b = 47              #[ft]
chord = 6.27219     #[ft]
S_ref = 294.79293      #[ft^2]
AR = 7.45293

def ZeroLiftDrag():
    c = 1.0447      #Ag aircraft constant (Roskam)
    d = 0.5326      #Ag aircraft constant (Roskam)
    W_TO = 5812     #Take off weight [lbs]
    S_wet = (10**c) * (W_TO**d)     #Wetted surface area [ft^2]

    C_f = 0.0055    #Estimated skin friction coefficient (Raymer)
    a = -2.2218     #Constant based on C_f (Roskam)
    b = 1.00        #Constant based on C_f (Roskam)

    f = 10**(a + b*(np.log10(S_wet)))       #logarithmic equation for equivalent parasite area (Roskam)

    #Here we will add in additional zero lift drag paramater like canapy and control surface gaps:
    C_d_0_CS = 0.0005       #Additional drag coefficient value for control surface gaps
    C_d_0_C = 0.0004        #Additional drag coefficient value for Canopy design
    C_d_0_A = 0.0008        #Additional drag coefficient value for GPS antenna

    C_d_0 = (f / S_ref) + C_d_0_CS + C_d_0_C + C_d_0_A
    return C_d_0

C_d_0 = ZeroLiftDrag()
print("Zero-Lift Drag Coefficient (C_d_0):", C_d_0)



def Configuration_Values(configuration):
    drag_LG = 0.015
    drag_Flaps_TO = 0.01
    drag_Flaps_L = 0.060
    e_clean = 0.825
    e_LG = e_clean
    e_Flaps_TO = 0.775
    e_Flaps_L = 0.725

    if configuration == 1:
        del_C_d_0 = drag_LG
        e = e_LG
    elif configuration == 2:
        del_C_d_0 = drag_LG + drag_Flaps_TO
        e = e_Flaps_TO
    elif configuration == 3:
        del_C_d_0 = drag_LG + drag_Flaps_L
        e = e_Flaps_L
    else:
        return "Configuration input is not possible"
    return del_C_d_0, e

#Create an array of values for C_L:
C_L = np.linspace(-2,2,100)

del_C_d_0_1, e_1 = Configuration_Values(1)
del_C_d_0_2, e_2 = Configuration_Values(2)
del_C_d_0_3, e_3 = Configuration_Values(3)

C_D_1 = (C_d_0 + del_C_d_0_1) + ((C_L**2) / (np.pi * e_1 * AR))
C_D_2 = (C_d_0 + del_C_d_0_2) + ((C_L**2) / (np.pi * e_2 * AR))
C_D_3 = (C_d_0 + del_C_d_0_3) + ((C_L**2) / (np.pi * e_3 * AR))


plt.figure(figsize=(10,6))
plt.title('Drag Polars for 3 Aircraft Configurations')
plt.xlabel("$C_D$")      
plt.ylabel("$C_L$")
line = 3      #creates a larger linewidth
plt.plot(C_D_1, C_L, color='blue', linewidth=line, label='Configuration #1: Static LG')
plt.plot(C_D_2, C_L, color='red', linewidth=line, label='Configuration #2: Static LG, Takeoff Flaps')
plt.plot(C_D_3, C_L, color='green', linewidth=line, label='Configuration #3: Static LG, Landing Flaps')
plt.legend(loc='best', fontsize='10', framealpha=1)
#plt.axis('equal')          #Forces equal scales
plt.show()
